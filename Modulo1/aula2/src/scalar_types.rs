/// Vari√°veis imut√°veis auxiliam o compilador em otimiza√ß√µes no c√≥digo, pois, essas vari√°veis n√£o
/// v√£o alterar o seu valor depois da primeira atribui√ß√£o. Isso tamb√©m torna o c√≥digo mais seguro.
fn variable_imutable() {
    /* Cria√ß√£o de uma v√°ri√°vel imut√°vel. Por padr√£o em Rust (e preferencialmente) todas as
       vari√°veis s√£o imut√°veis. */
    let a = 10;

    /* O c√≥digo abaixo n√£o compila, pois 'a' √© uma v√°ri√°vel imut√°vel. Ou seja, ela s√≥ pode
       ter seu valor alterado uma √∫nica vez. */
    // a = 20;

    /* O c√≥digo abaxo compila, pois a vari√°vel 'a' est√° sendo redefinida. Isso √© chamado de
       shadowing. */
    let a = "20";
}

/// Em alguns momentos √© necess√°rio ter vari√°veis que podem mudar seu valor ap√≥s a primeira
/// atribui√ß√£o. Isso torna as otimiza√ß√µes do compilador mais dif√≠ceis, por√©m em alguns momentos
/// √© necess√°rio.
fn variable_mutable() {
    /* Cria√ß√£o de uma v√°ri√°vel mut√°vel. A escolha de vari√°veis mut√°veis devem ser a excess√£o. */
    let mut a = 20;

    /* O c√≥digo abaixo compila, pois 'a' √© uma vari√°vel mut√°vel. Ou seja, ela pode ter o seu valor
     alterado v√°rias vezes. */
    a = 10;

    /* Com a vari√°vel mut√°vel ainda conseguimos fazer o shadowing e mudar o tipo da vari√°vel para
       imut√°vel. Note que est√° sendo criada uma vari√°vel, por√©m estamos "reaproveitando" o mesmo
       nome: 'a' */
    let a = 30;
}

/// Em rust, n√£o existe inteiro no formato 'int', como em c. Para usar inteiros, devemos
/// especificar quantos bits queremos utilizar.
fn integers() {
    /* Inteiros sem sinal */
    let unsigned_byte: u8;      // uint8_t
    let unsigned_short: u16;    // uint16_t
    let unsigned_word: u32;     // uint32_t
    let unsigned_dword: u64;    // uint64_t
    let unsigned_qword: u128;   // Sem equivalente em C90, no C23 uint128_t
    let unsigned_arch_dependent_size: usize; // size_t

    /* Inteiros com sinal */
    let signed_byte: i8;        // int8_t
    let signed_short: i16;      // int16_t
    let signed_word: i32;       // int32_t
    let signed_dword: i64;      // int64_t
    let signed_qword: i128;     // Sem equivalente em C90, no C23 uint128_t
    let signed_arch_dependent_size: isize;  // size_t
}

/// Assim como em c, rust disponibiliza dois tipos de pontos flutuantes: f32 e f64.
fn float_points() {
    /* Ponto flutuante de 32 bits, ou, precis√£o simples. */
    let single_precision: f32; // float

    /* Ponto flutuante de 64 bits, ou, precis√£o dupla. */
    let double_precision: f64; // double
}

/// Em rust n√£o √© necess√°rio (na maioria das vezes) dizer o tipo da vari√°vel.
/// O compilador identifica os tipos das vari√°veis em tempo de compila√ß√£o.
fn type_inference() {
    /* Infer√™ncia do tipo a partir do valor */
    let a = 21;
    /* Defini√ß√£o explicita do tipo */
    let b: u8 = 21;
    /* Valor cont√©m o tipo explicitamente */
    let a = 21u8;
    /* Utiliza√ß√£o do caracter de separa√ß√£o entre o n√∫mero e o tipo */
    let d = 23_u8;
    /* Utiliza√ß√£o do caracter se separa√ß√£o entre as centenas do n√∫mero */
    let c = 2_000;

    /* Representa√ß√£o em hexadecimal. Inicia com 0x */
    let hex: u32 = 0xff_ff_ff_ff;
    /* Representa√ß√£o em octal. Inicia com 0o */
    let octal = 0o237;
    /* Representa√ß√£o em bin√°rio. Inicia com 0b */
    let binary = 0b11u32;
}

/// Caracteres s√£o sempre representados por aspas simples ''.
/// S√≥ pode haver um caracter nas aspas simples, mesmo que essa letra ocupe mais de um byte na
/// tabela do unicode.
/// Os caracteres ocupam 4 bytes
fn chars() {
    let unicode_one_byte = '$';
    let unicode_two_bytes = '¬£';
    let unicode_three_bytes = '‚Ç¨';
    let unicode_four_bytes = 'üòä';
}

/// Strings s√£o limitadas por aspas duplas "".
fn strings() {
    /* Tipo da string literal √© &str */
    let literal_str: &str = "Hello, World!";

    /* String com 1 byte e 1 caracter */
    let str_one_byte = "$";
    /* String com 2 bytes e 1 caracter */
    let str_two_byte = "¬£";
    /* String com 3 bytes e 1 caracter */
    let str_three_byte = "‚Ç¨";
    /* String com 3 bytes e 1 caracter */
    let str_three_byte = "üòä";
}

/// Bytestring s√£o limitadas por aspas duplas, iniciada pela letra b (b"").
fn byte_strings() {
    /* O tipo de uma bytestring √© uma referencia de um array de u8 (&[u8; N]) */
    let literal_byte_str = b"Hello,\x20World!";
}

/// Booleanos s√≥ podem assumir dois valores true ou false
fn booleans() {
    let true_var = true;
    let false_var = false;
}

/// O tipo unit √© um tipo especial que possui apenas um valor: ().
/// A representa√ß√£o do tipo √© a mesma do seu √∫nico valor: ().
/// Desta forma, quando encontramos () no c√≥digo pode ser tanto o valor quanto o tipo.
/// O que vai diferenciar o tipo do valor √© o contexto.
/// Esse tipo √© semelhante ao tipo 'void' do c, entretanto, diferentemente do c, esse tipo possui um valor.
fn unit_type() {
    let unit = ();
}

/// Rust n√£o permite a convers√£o direta de inteiros.
/// √â necess√°rio que o desenvolvedor explicite a convers√£o usando a sintaxe 'as'.
fn casts_integers() {
    /* Convers√£o de i32 para u8 */
    let a: u8 = 10i32 as u8;

    /* Erro de compila√ß√£o. N√£o √© poss√≠vel fazer a convers√£o direta de um inteiro com sinal, para um
       inteiro sem sinal. O sentido contr√°rio tamb√©m √© v√°lido. */
    let a: u32 = 10i32;
    // let a: i32 = 10u32;
    let a: u32 = 10i32 as u32;
}

/// Com a mesma sintaxe do 'as' √© possivel converter inteiros em ponto flutuantes e o inverso.
fn cast_between_float_and_int() {
    /* O valor em ponto flutuante ser√° truncado quando convertido para um inteiro. */
    let a: u8 = 10.5_f32 as u8;

    /* A convers√£o de inteiro para ponto flutuante √© direta. */
    let a: f32 = 10u8 as f32;
}

/// A convers√£o booleano para inteiro √© direta usando a sintaxe 'as'.
fn cast_bool_to_int() {
    let a = true as u8;
}

/// N√£o √© poss√≠vel converter um inteiro para um booleano usando a sintaxe 'as'.
/// √â necess√°rio verificar se o inteiro difere de zero.
fn cast_int_to_bool() {
    /* Vari√°vel inteira criada */
    let a = 1u8;

    /* Erro de compila√ß√£o */
    let a = a as bool;

    /* Forma correta de fazer o cast de inteiro para booleano */
    let a = a != 0 as bool;
}

/// A convers√£o de char para inteiro √© realizada diretamente usando a sintaxe 'as'.
fn cast_char_to_int() {
    /* O valor de 'a' ser√° 65. */
    let a = 'A' as u8;
    /* O valor de 'a' ser√° 172. O valor √© truncado, pois, o caracter '‚Ç¨' possui mais de um byte */
    let a = '‚Ç¨' as u8;
    /* O valor de 'a' ser√° 8364. O valor possui todos os bytes do caracter '‚Ç¨' */
    let a = '‚Ç¨' as u16;
}

/// A convers√£o de inteiro para char √© direta, usando a sintaxe 'as', se o inteiro for do tipo u8.
fn cast_int_to_char() {
    /* O valor de 'a' ser√° 'A' */
    let a = 65u8 as char;

    /* Erro de compila√ß√£o. N√£o √© poss√≠vel converter um inteiro diferente de u8 para char. */
    // let a = 65_i32 as char;
}

/// √â poss√≠vel obter o d√≠gito no formato char, usando o m√©todo 'from_digits'.
/// Note que esse m√©todo √© utilizado apenas para obter um √∫nico d√≠gito, j√° que o char s√≥ suporta
/// apenas um √∫nico caracter.
fn digit_to_char() {
    /* Obtendo o d√≠gito referente ao n√∫mero 2 na base 10 ('2') */
    let a = char::from_digit(2, 10).unwrap();

    /* Obtendo o d√≠gito referente ao n√∫meor 10 na base 16 ('a') */
    let a = char::from_digit(10, 16).unwrap();

    /* Erro em runtime. Pois n√£o √© poss√≠vel converter 10 em apenas um caracter. */
    let a = char::from_digit(10, 10).unwrap();
}
